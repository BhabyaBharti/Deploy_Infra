trigger: none

variables:
  config_path: '$(System.DefaultWorkingDirectory)/Infra_QA'

parameters:
  - name: runApply
    displayName: "Run Terraform Apply in Prod?"
    type: boolean
    default: false

stages:
  - stage: Dev
    pool: Initial Pool
    jobs:
      - job: Init
        displayName: "Init_Stage"
        steps:
        - task: TerraformInstaller@1
          displayName: "Terraform_Installer"
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTask@5
          displayName: "Terraform_Init"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(config_path)'
            backendServiceArm: 'Azure_Pipelines'
            backendAzureRmResourceGroupName: 'RG_State'
            backendAzureRmStorageAccountName: 'persistentstate'
            backendAzureRmContainerName: 'container-state'
            backendAzureRmKey: 'infra.tfstate'
      - job: Plan
        displayName: "Plan"
        dependsOn: Init
        steps:
        - task: TerraformTask@5
          displayName: "Terraform_Init"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(config_path)'
            backendServiceArm: 'Azure_Pipelines'
            backendAzureRmResourceGroupName: 'RG_State'
            backendAzureRmStorageAccountName: 'persistentstate'
            backendAzureRmContainerName: 'container-state'
            backendAzureRmKey: 'infra.tfstate'
        - task: TerraformTask@5
          displayName: "Terraform_Fmt"
          inputs:
            provider: 'azurerm'
            command: 'custom'
            workingDirectory: '$(config_path)'
            outputTo: 'console'
            customCommand: 'fmt'
            environmentServiceNameAzureRM: 'Azure_Pipelines'
        - task: TerraformTask@5
          displayName: "Terraform_Plan"
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(config_path)'
            environmentServiceNameAzureRM: 'Azure_Pipelines'
      - job: Validate
        dependsOn: Plan
        displayName: "Validate"
        steps:
        - task: TerraformTask@5
          displayName: "Terraform_Validate"
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(config_path)'
  - stage: Approval
    pool: server
    displayName: "Approval"
    dependsOn: Dev
    jobs:
      - job: Manual_Validation
        displayName: "Manual_Validation"
        steps:
        - task: ManualValidation@1
          displayName: "Manual_Validation"
          inputs:
            notifyUsers: 'bhavyabharti072@gmail.com'
            approvers: 'bhavyabharti072@gmail.com'
            onTimeout: 'resume'
  - stage: Prod
    pool: Initial Pool
    displayName: "Prod"
    dependsOn: Approval
    jobs:
      - job: Init
        displayName: "Init_Prod"
        steps:
        - task: TerraformTask@5
          displayName: "Terraform_Init"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(config_path)'
            backendServiceArm: 'Azure_Pipelines'
            backendAzureRmResourceGroupName: 'RG_State'
            backendAzureRmStorageAccountName: 'persistentstate'
            backendAzureRmContainerName: 'container-state'
            backendAzureRmKey: 'infra.tfstate'
        - task: TerraformTask@5
          displayName: "Terraform_Fmt"
          inputs:
            provider: 'azurerm'
            command: 'custom'
            workingDirectory: '$(config_path)'
            outputTo: 'console'
            customCommand: 'fmt'
            environmentServiceNameAzureRM: 'Azure_Pipelines'
      - job: Plan
        displayName: "Plan_in_Prod"
        dependsOn: Init
        steps:
        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(config_path)'
            backendServiceArm: 'Azure_Pipelines'
            backendAzureRmResourceGroupName: 'RG_State'
            backendAzureRmStorageAccountName: 'persistentstate'
            backendAzureRmContainerName: 'container-state'
            backendAzureRmKey: 'infra.tfstate'
        - task: TerraformTask@5
          displayName: "Terraform_Plan"
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(config_path)'
            environmentServiceNameAzureRM: 'Azure_Pipelines'
      - job: Validate
        displayName: "Validate_In_Prod"
        dependsOn: Plan
        steps:
        - task: TerraformTask@5
          displayName: "Terraform_Validate"
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(config_path)'
      - job: Apply
        displayName: "Apply_In_Prod"
        dependsOn: Validate
        steps:
        - task: TerraformTask@5
          displayName: "Terraform_Init"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(config_path)'
            backendServiceArm: 'Azure_Pipelines'
            backendAzureRmResourceGroupName: 'RG_State'
            backendAzureRmStorageAccountName: 'persistentstate'
            backendAzureRmContainerName: 'container-state'
            backendAzureRmKey: 'infra.tfstate'
        - task: TerraformTask@5
          displayName: "Terraform_Apply"
          condition: eq(${{ parameters.runApply }}, true)
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(config_path)'
            environmentServiceNameAzureRM: 'Azure_Pipelines'